version: '3.8'

services:
  # 1. Knowledge Base (KB) Service
  kb-service:
    build:
      context: .
      dockerfile: kb-service/Dockerfile
    container_name: kb-service
    ports:
      - "50052:50052" # gRPC 포트
    volumes:
      - ./data/kb:/app/data # 영구 데이터를 호스트에 저장
    # command: python kb_service.py # Dockerfile의 CMD 사용

  # 2. Reasoner (LLM 추론)
  reasoner-engine:
    build:
      context: .
      dockerfile: reasoner/Dockerfile
    container_name: reasoner
    ports:
      - "50053:50053" # gRPC 포트
    depends_on:
      - kb-service
    # 실제 환경에서는 GPU 접근을 위한 runtime: nvidia 옵션이 필요할 수 있습니다.

  # 3. Safety Runtime (SLO 감시 및 제어)
  safety-runtime:
    build:
      context: .
      dockerfile: safety-runtime/Dockerfile
    container_name: safety-runtime
    privileged: true # 커널 노브 제어 및 eBPF 맵 접근 시 필요
    ports:
      - "50051:50051" # gRPC 포트
    depends_on:
      - kb-service
      - reasoner-engine

  # 4. Telemetry Agent (eBPF 커널 메트릭 수집)
  telemetry-agent:
    build:
      context: .
      dockerfile: telemetry-agent/Dockerfile
    container_name: telemetry-agent
    privileged: true
    pid: "host" # PID 네임스페이스 공유 (eBPF가 모든 프로세스 접근 가능)
    volumes:
      - /sys/kernel/debug:/sys/kernel/debug:ro # BPF 파일시스템 접근
      - /lib/modules:/lib/modules:ro # 커널 모듈 접근
    depends_on:
      - safety-runtime # 수집된 메트릭을 Safety Runtime으로 전송

  # 5. Operator Console (Vue.js/TypeScript) 및 gRPC-Web Proxy (Nginx)
  operator-console:
    build:
      context: ./operator-console
      dockerfile: Dockerfile
    container_name: operator-console
    ports:
      - "8080:8080"
    depends_on:
      - safety-runtime

