# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from proto import semantos_pb2 as proto_dot_semantos__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in proto/semantos_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SemantosControlStub(object):
    """SemantosControl 서비스는 SemantOS 프레임워크의 핵심 제어 루프 역할을 합니다.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetRecommendations = channel.unary_unary(
                '/semantos.SemantosControl/GetRecommendations',
                request_serializer=proto_dot_semantos__pb2.TelemetrySnapshot.SerializeToString,
                response_deserializer=proto_dot_semantos__pb2.TuningRecommendationList.FromString,
                _registered_method=True)
        self.ApplyConfiguration = channel.unary_unary(
                '/semantos.SemantosControl/ApplyConfiguration',
                request_serializer=proto_dot_semantos__pb2.TuningRecommendation.SerializeToString,
                response_deserializer=proto_dot_semantos__pb2.ApplyResponse.FromString,
                _registered_method=True)
        self.LogOutcome = channel.unary_unary(
                '/semantos.SemantosControl/LogOutcome',
                request_serializer=proto_dot_semantos__pb2.OptimizationTrace.SerializeToString,
                response_deserializer=proto_dot_semantos__pb2.LogResponse.FromString,
                _registered_method=True)


class SemantosControlServicer(object):
    """SemantosControl 서비스는 SemantOS 프레임워크의 핵심 제어 루프 역할을 합니다.
    """

    def GetRecommendations(self, request, context):
        """텔레메트리 스냅샷을 기반으로 튜닝 권장 사항 목록을 요청합니다.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApplyConfiguration(self, request, context):
        """Safety Runtime에서 LLM의 권장 사항을 시스템에 적용하도록 요청합니다.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogOutcome(self, request, context):
        """최적화 결과를 Knowledge Base(KB)에 로깅하여 지속적인 학습에 사용합니다.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SemantosControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetRecommendations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRecommendations,
                    request_deserializer=proto_dot_semantos__pb2.TelemetrySnapshot.FromString,
                    response_serializer=proto_dot_semantos__pb2.TuningRecommendationList.SerializeToString,
            ),
            'ApplyConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.ApplyConfiguration,
                    request_deserializer=proto_dot_semantos__pb2.TuningRecommendation.FromString,
                    response_serializer=proto_dot_semantos__pb2.ApplyResponse.SerializeToString,
            ),
            'LogOutcome': grpc.unary_unary_rpc_method_handler(
                    servicer.LogOutcome,
                    request_deserializer=proto_dot_semantos__pb2.OptimizationTrace.FromString,
                    response_serializer=proto_dot_semantos__pb2.LogResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'semantos.SemantosControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('semantos.SemantosControl', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SemantosControl(object):
    """SemantosControl 서비스는 SemantOS 프레임워크의 핵심 제어 루프 역할을 합니다.
    """

    @staticmethod
    def GetRecommendations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/semantos.SemantosControl/GetRecommendations',
            proto_dot_semantos__pb2.TelemetrySnapshot.SerializeToString,
            proto_dot_semantos__pb2.TuningRecommendationList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApplyConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/semantos.SemantosControl/ApplyConfiguration',
            proto_dot_semantos__pb2.TuningRecommendation.SerializeToString,
            proto_dot_semantos__pb2.ApplyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LogOutcome(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/semantos.SemantosControl/LogOutcome',
            proto_dot_semantos__pb2.OptimizationTrace.SerializeToString,
            proto_dot_semantos__pb2.LogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
