syntax = "proto3";

package semantos;

// SemantosControl 서비스는 SemantOS 프레임워크의 핵심 제어 루프 역할을 합니다.
service SemantosControl {
  // 텔레메트리 스냅샷을 기반으로 튜닝 권장 사항 목록을 요청합니다.
  rpc GetRecommendations(TelemetrySnapshot) returns (TuningRecommendationList);
  
  // Safety Runtime에서 LLM의 권장 사항을 시스템에 적용하도록 요청합니다.
  rpc ApplyConfiguration(TuningRecommendation) returns (ApplyResponse);
  
  // 최적화 결과를 Knowledge Base(KB)에 로깅하여 지속적인 학습에 사용합니다.
  rpc LogOutcome(OptimizationTrace) returns (LogResponse);
}

// 텔레메트리 에이전트(eBPF)에서 수집한 시스템 상태의 스냅샷입니다.
message TelemetrySnapshot {
  string host_id = 1; // 호스트 식별자
  
  // 실시간 메트릭 (예: "cpu_run_queue_len", "p95_latency_ms")
  map<string, double> metrics = 2; 
  
  // 현재 커널 설정 값 (예: "vm.swappiness": "1")
  map<string, string> current_knobs = 3; 
}

// Reasoner (LLM)이 생성한 튜닝 권장 사항입니다.
message TuningRecommendation {
  string knob_name = 1;      // 변경을 제안하는 커널 매개변수 이름
  string proposed_value = 2; // 제안하는 새로운 값
  string rationale = 3;      // 자연어 설명 및 추론 근거 (Explainability)
  double uncertainty_score = 4; // 추론의 불확실성 점수
  
  // 예상되는 성능 영향 (예: "latency_delta", "throughput_delta")
  map<string, double> predicted_impact = 5; 
}

// ApplyConfiguration 호출에 대한 Safety Runtime의 응답입니다.
message ApplyResponse {
  bool success = 1;          // 적용 성공 여부
  string status_message = 2; // 상세 상태 메시지
  string audit_log_id = 3;   // 감사 로그 식별자
}

// 최적화 결과를 Knowledge Base에 기록하기 위한 트레이스 데이터입니다.
message OptimizationTrace {
  TelemetrySnapshot initial_state = 1; // 변경 전 시스템 상태
  TuningRecommendation action = 2;    // 수행된 튜닝 조치
  TelemetrySnapshot outcome_state = 3; // 변경 후 시스템 상태 (결과)
  bool slo_violation = 4;            // 서비스 레벨 목표 위반 발생 여부
}

// 여러 튜닝 권장 사항을 포함하는 목록입니다.
message TuningRecommendationList {
  repeated TuningRecommendation recommendations = 1;
}

// LogOutcome 호출에 대한 응답입니다.
message LogResponse {
  bool success = 1;
}